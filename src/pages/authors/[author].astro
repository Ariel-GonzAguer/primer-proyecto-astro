---
import BaseLayout from "@layouts/BaseLayout.astro";
import BlogPost from "@components/BlogPost.astro";
import type { MarkdownInstance } from "astro";
import type { Frontmatter } from "@tags/[tag].astro";

export interface Paths {
  params: {
    author: string;
  };
  props: {
    posts: MarkdownInstance<Frontmatter>[];
  };
}

export async function getStaticPaths(): Promise<Paths[]> {
  const allPosts: MarkdownInstance<Frontmatter>[] = Object.values(
    import.meta.glob<MarkdownInstance<Frontmatter>>("../posts/*.md", {
      eager: true,
    })
  );

  const uniqAuthors = [
    ...new Set(
      allPosts
        .map((post: MarkdownInstance<Frontmatter>) => post.frontmatter.author)
        .flat()
    ),
  ];

  return uniqAuthors.map((author): Paths => {
    const filteredPosts = allPosts.filter(
      (post: MarkdownInstance<Frontmatter>) => {
        return post.frontmatter.author === author;
      }
    );
    return {
      params: { author },
      props: { posts: filteredPosts },
    };
  });
}

const { author } = Astro.params;
const { posts } = Astro.props;

---

<BaseLayout pageTitle={author}>
  <p>Posts by {author}</p>
  <ul>
    {
      posts.map((post: any) => (
        <BlogPost
          url={post.url}
          title={post.frontmatter.title}
          author={post.frontmatter.author}
        />
      ))
    }
  </ul>
</BaseLayout>
